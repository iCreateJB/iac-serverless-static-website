name: Build
on:
  push:
    branches:
      - main
    tags:
      - releases/**
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - uses: actions/github-script@v5
        id: get-repo-name
        with:
          script: |
            const serviceName = context.payload.repository.full_name.split('/')[1].substring('iac-'.length)
            const domainName  = serviceName.replace('-','.')
            core.setOutput('serviceName', serviceName)
            core.setOutput('domainName', domainName)
      - run: echo "${{ steps.get-repo-name.outputs.serviceName }}"
      - run: echo "${{ steps.get-repo-name.outputs.domainName }}"
    outputs:
      serviceName: "${{ steps.get-repo-name.outputs.serviceName }}"
      domainName: "${{ steps.get-repo-name.outputs.domainName }}"
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ needs.build.outputs.serviceName }}"
      - run: echo "${{ needs.build.outputs.domainName }}"
  deploy:
    needs: [build, test]  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1    
      - name: Install serverless Framework
        run: npm install -g serverless
      - name: Serverless provider authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}
      - name: Install NPM dependencies
        run: npm install
      - name: Deploy
        env:
          SERVICE_NAME: "${{ needs.build.outputs.repoName }}"
          DOMAIN_NAME: "${{ needs.build.outputs.domainName }}"
          HOSTED_ZONE: ${{ secrets.HOSTED_ZONE }}
        run: SERVICE_NAME=$SERVICE_NAME DOMAIN_NAME=$DOMAIN_NAME sls deploy
  deploy-to-prod:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [build, test]  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1    
      - name: Install serverless Framework
        run: npm install -g serverless
      - name: Serverless provider authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}
      - name: Install NPM dependencies
        run: npm install
      - name: Deploy
        env:
          SERVICE_NAME: "${{ needs.build.outputs.serviceName }}"
          DOMAIN_NAME: "${{ needs.build.outputs.domainName }}"
          HOSTED_ZONE: ${{ secrets.HOSTED_ZONE }}
        run: SERVICE_NAME=$SERVICE_NAME DOMAIN_NAME=$DOMAIN_NAME sls deploy -s prod